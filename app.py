import os
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from langchain_openai import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.schema import SystemMessage, HumanMessage

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

llm = ChatOpenAI(api_key=OPENAI_API_KEY, model="gpt-4o")
memory = ConversationBufferMemory(return_messages=True)

PROMPT_PATH = "system_prompt.txt"

def load_prompt():
    if os.path.exists(PROMPT_PATH):
        with open(PROMPT_PATH, 'r', encoding='utf-8') as file:
            return file.read().strip()
    return ""

async def send_message(update, context, text):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

async def handle_message(update, context):
    user_text = update.message.text.strip()
    history = memory.load_memory_variables({})["history"]
    prompt = load_prompt()
    messages = [SystemMessage(content=prompt)] + history + [HumanMessage(content=user_text)]
    response = llm.invoke(messages).content
    memory.save_context({"input": user_text}, {"output": response})
    await send_message(update, context, response)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update, context):
    language = update.effective_user.language_code or "en"
    if language.startswith("ru"):
        welcome = (
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "–Ø ‚Äî ü§ñ *AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º* –≤ –∫–æ–º–ø–∞–Ω–∏–∏ AVALON ‚Äî –¥–µ–≤–µ–ª–æ–ø–µ—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –ë–∞–ª–∏.\n\n"
            "üè† –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –ø—Ä–æ–µ–∫—Ç—ã (OM, BUDDHA, TAO), –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–µ–∑–¥.\n\n"
            "üß† –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å ‚Äî –∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
            "üåê –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ *–ª—é–±–æ–º —è–∑—ã–∫–µ* ‚Äî —è –≤–∞—Å –ø–æ–π–º—É."
        )
    elif language.startswith("uk"):
        welcome = (
            "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
            "–Ø ‚Äî ü§ñ *AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –ø—Ä–æ–¥–∞–∂—É* –∫–æ–º–ø–∞–Ω—ñ—ó AVALON ‚Äî –¥–µ–≤–µ–ª–æ–ø–µ—Ä–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –Ω–∞ –ë–∞–ª—ñ.\n\n"
            "üè† –ü–∏—Ç–∞–π—Ç–µ –ø—Ä–æ –ø—Ä–æ—î–∫—Ç–∏ (OM, BUDDHA, TAO), –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å, –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∞–±–æ –ø–µ—Ä–µ—ó–∑–¥.\n\n"
            "üß† –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º ‚Äî –∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
            "üåê –ú–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ *–±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é* ‚Äî —è –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ—é."
        )
    else:
        welcome = (
            "üëã Hello and welcome!\n\n"
            "I'm the ü§ñ *AI sales assistant* at AVALON ‚Äî a real estate development company based in Bali.\n\n"
            "üè† You can ask me anything about our investment projects (OM, BUDDHA, TAO), rental income, ROI, property management, or moving to Bali.\n\n"
            "üß† I‚Äôll do my best to help you ‚Äî and if needed, one of our real sales managers will follow up personally.\n\n"
            "üåê Feel free to write in *any language* ‚Äî I‚Äôll understand and reply accordingly."
        )
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=welcome, 
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥—ã
async def setprompt(update, context):
    new_prompt = " ".join(context.args)
    with open(PROMPT_PATH, 'w', encoding='utf-8') as file:
        file.write(new_prompt)
    await send_message(update, context, "System prompt —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def add_prompt(update, context):
    addition = " ".join(context.args)
    with open(PROMPT_PATH, 'a', encoding='utf-8') as file:
        file.write("\n" + addition)
    await send_message(update, context, "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–º–ø—Ç—É.")

async def prompt(update, context):
    current_prompt = load_prompt()
    await send_message(update, context, f"üìÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n{current_prompt}")

if __name__ == '__main__':
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", setprompt))
    application.add_handler(CommandHandler("add", add_prompt))
    application.add_handler(CommandHandler("addall", setprompt))
    application.add_handler(CommandHandler("prompt", prompt))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.run_polling()