from flask import Flask, request
from openai import OpenAI
import requests
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

TELEGRAM_TOKEN = "8116449369:AAGBPph9JSaUGVpS731xGsAXxthQYFrthpA"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

def load_documents():
    folder = "data"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read())
    return "\n\n".join(context_parts)

def load_system_prompt():
    with open("data/system_prompt.txt", "r", encoding="utf-8") as f:
        return f.read()

documents_context = load_documents()
system_prompt = load_system_prompt()

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    print("üîî –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:", data)

    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "")
    language = message.get("from", {}).get("language_code", "en")

    if not chat_id:
        return "no chat_id", 400

    if text.strip() == "/start":
        if language.startswith("ru"):
            welcome = (
                "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                "–Ø ‚Äî ü§ñ *AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º* –≤ –∫–æ–º–ø–∞–Ω–∏–∏ AVALON ‚Äî –¥–µ–≤–µ–ª–æ–ø–µ—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –ë–∞–ª–∏.\n\n"
                "üè† –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –ø—Ä–æ–µ–∫—Ç—ã (OM, BUDDHA, TAO), –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–µ–∑–¥.\n\n"
                "üß† –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å ‚Äî –∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
                "üåê –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ *–ª—é–±–æ–º —è–∑—ã–∫–µ* ‚Äî —è –≤–∞—Å –ø–æ–π–º—É."
            )
        elif language.startswith("uk"):
            welcome = (
                "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
                "–Ø ‚Äî ü§ñ *AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –ø—Ä–æ–¥–∞–∂—É* –∫–æ–º–ø–∞–Ω—ñ—ó AVALON ‚Äî –¥–µ–≤–µ–ª–æ–ø–µ—Ä–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –Ω–∞ –ë–∞–ª—ñ.\n\n"
                "üè† –ü–∏—Ç–∞–π—Ç–µ –ø—Ä–æ –ø—Ä–æ—î–∫—Ç–∏ (OM, BUDDHA, TAO), –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å, –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∞–±–æ –ø–µ—Ä–µ—ó–∑–¥.\n\n"
                "üß† –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º ‚Äî –∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
                "üåê –ú–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ *–±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é* ‚Äî —è –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ—é."
            )
        else:
            welcome = (
                "üëã Hello and welcome!\n\n"
                "I'm the ü§ñ *AI sales assistant* at AVALON ‚Äî a real estate development company based in Bali.\n\n"
                "üè† You can ask me anything about our investment projects (OM, BUDDHA, TAO), rental income, ROI, property management, or moving to Bali.\n\n"
                "üß† I‚Äôll do my best to help you ‚Äî and if needed, one of our real sales managers will follow up personally.\n\n"
                "üåê Feel free to write in *any language* ‚Äî I‚Äôll understand and reply accordingly."
            )
        send_telegram_message(chat_id, welcome)
        return "ok"

    if text.startswith("/addall "):
        if str(message.get("from", {}).get("id")) == "5275555034":
            new_prompt = text.replace("/addall ", "", 1).strip()
            with open("data/system_prompt.txt", "w", encoding="utf-8") as f:
                f.write(new_prompt)
            send_telegram_message(chat_id, "‚úÖ System prompt fully replaced via /addall.")
        else:
            send_telegram_message(chat_id, "‚ùå You are not authorized to use this command.")
        return "ok"
    
    
    
    if text.strip() == "/prompt":
        if str(message.get("from", {}).get("id")) == "5275555034":
            try:
                with open("data/system_prompt.txt", "r", encoding="utf-8") as f:
                    prompt_text = f.read()
                send_telegram_message(chat_id, "üìÑ Current system prompt:

" + prompt_text)
            except Exception as e:
                send_telegram_message(chat_id, "‚ùå Failed to read system prompt.")
        else:
            send_telegram_message(chat_id, "‚ùå You are not authorized to use this command.")
        return "ok"
    
    
    


    if text.startswith("/add "):
        if str(message.get("from", {}).get("id")) == "5275555034":
            new_part = text.replace("/add ", "", 1).strip()
            with open("data/system_prompt.txt", "a", encoding="utf-8") as f:
                f.write("
" + new_part)
            send_telegram_message(chat_id, "‚úÖ Text appended to system prompt via /add.")
        else:
            send_telegram_message(chat_id, "‚ùå You are not authorized to use this command.")
        return "ok"

    if text.startswith("/admin setprompt "):
        if str(message.get("from", {}).get("id")) == "5275555034":
            new_prompt = text.replace("/admin setprompt ", "", 1).strip()
            with open("data/system_prompt.txt", "w", encoding="utf-8") as f:
                f.write(new_prompt)
            send_telegram_message(chat_id, "‚úÖ System prompt updated successfully.")
        else:
            send_telegram_message(chat_id, "‚ùå You are not authorized to use this command.")
        return "ok"
    


    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"},
                {"role": "user", "content": text}
            ]
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}"
        print("‚ùå –û—à–∏–±–∫–∞ GPT:", e)

    send_telegram_message(chat_id, reply)
    return "ok"

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    r = requests.post(url, json=payload)
    print("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", r.status_code, r.text)

@app.route("/", methods=["GET"])
def home():
    return "Telegram GPT bot is running."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
